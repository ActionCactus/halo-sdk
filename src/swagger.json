{
  "swagger": "2.0",
  "info": {
    "version": "",
    "title": "Halo",
    "description": "Software Development Kit (SDK) to access the Halo RESTful API.",
    "license": {
      "name": "MIT",
      "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    }
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "securityDefinitions": {
    "auth": {
      "type": "basic"
    }
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/@/settings/{setting_id}": {
      "get": {
        "description": "Get the fields that constitute the setting",
        "tags": [
          "Admin"
        ],
        "operationId": "Get Setting_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setting_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SettingField"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update settings",
        "tags": [
          "Admin"
        ],
        "operationId": "Update Settings_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setting_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "field",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "schema": {
              "$ref": "#/definitions/SettingField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SettingField"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/messages/{message_id}": {
      "get": {
        "description": "Get a message. See the Message model for more information.",
        "tags": [
          "Message"
        ],
        "operationId": "Get Message_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the message ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update a message.  See the Message model for more information.",
        "tags": [
          "Message"
        ],
        "operationId": "Update Message_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the message ID."
          },
          {
            "name": "message",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The message model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a message.  See the Message model for more information.",
        "tags": [
          "Message"
        ],
        "operationId": "Remove Message_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the message ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/@/functions/{function}": {
      "put": {
        "description": "Execute admin function",
        "tags": [
          "Admin"
        ],
        "operationId": "Execute Function_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "function",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "enum": [
              "update",
              "initSectors",
              "initAlarms",
              "setClock",
              "reboot"
            ],
            "type": "string",
            "description": "The administrative function to be executed"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/@/settings": {
      "get": {
        "description": "Get system settings",
        "tags": [
          "Admin"
        ],
        "operationId": "Get Settings_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Setting"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/teams": {
      "get": {
        "description": "Get a collection of teams. See the Team model for more information.",
        "tags": [
          "Team"
        ],
        "operationId": "Get Teams_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "permissions",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Create a team. See the Team model for more information.",
        "tags": [
          "Team"
        ],
        "operationId": "Add Team_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "team",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The team model specifying the values of the object to create. It is not a requirement to construct a complete model object.",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/teams/{team_id}": {
      "get": {
        "description": "Get a team. See the Team model for more information.",
        "tags": [
          "Team"
        ],
        "operationId": "Get Team_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the team ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update a team. See the Team model for more information.",
        "tags": [
          "Team"
        ],
        "operationId": "Update Team_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the team ID."
          },
          {
            "name": "team",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The team model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a team. See the Team model for more information. ",
        "tags": [
          "Team"
        ],
        "operationId": "Remove Team_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the team ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/sectors/{sector_id}/nodes/{node_id}/properties/{property_id}": {
      "get": {
        "description": "Get a node property. See the Property model for more information.",
        "tags": [
          "Property"
        ],
        "operationId": "Get Node Property_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent sector ID."
          },
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent node ID."
          },
          {
            "name": "property_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the property ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update a node property.  See the Property model for more information.",
        "tags": [
          "Property"
        ],
        "operationId": "Update Node Property_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent sector ID."
          },
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent node ID."
          },
          {
            "name": "property_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the property ID."
          },
          {
            "name": "property",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The property model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/sectors/{sector_id}/nodes/{node_id}": {
      "get": {
        "description": "Get a node. See the Node model for more information.",
        "tags": [
          "Node"
        ],
        "operationId": "Get Sector Node_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent sector ID."
          },
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the node ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update a node.  See the Node model for more information.",
        "tags": [
          "Node"
        ],
        "operationId": "Update Sector Node_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent sector ID."
          },
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the node ID."
          },
          {
            "name": "node",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The node model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Create a request to manually uninstall a node.  See the Node model for more information.",
        "tags": [
          "Node"
        ],
        "operationId": "Remove Sector Node_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent sector ID."
          },
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the node ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/sectors": {
      "get": {
        "description": "Get a collection of sectors. See the Sector model for more information.",
        "tags": [
          "Sector"
        ],
        "operationId": "Get Sectors_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "model",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "addresses",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "manufacturer",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "silent",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "engineId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sector"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Create a Sector.  See the Sector model for more information.",
        "tags": [
          "Sector"
        ],
        "operationId": "Add Sector_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The sector model specifying the values of the object to create. It is not a requirement to construct a complete model object.",
            "schema": {
              "$ref": "#/definitions/Sector"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Sector"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/sectors/{sector_id}": {
      "get": {
        "description": "Get a Sector. See the Sector model for more information.",
        "tags": [
          "Sector"
        ],
        "operationId": "Get Sector_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the sector ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Sector"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update a sector.  See the Sector model for more information.",
        "tags": [
          "Sector"
        ],
        "operationId": "Update Sector_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the sector ID."
          },
          {
            "name": "sector",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The sector model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/Sector"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Sector"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a sector. Only owned or authorized sectors can be deleted. See the Sector model for more information. ",
        "tags": [
          "Sector"
        ],
        "operationId": "Remove Sector_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the sector ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Get a collection of users. Requests made from administrative accounts return complete person models.  Requests made from non administrative accounts return person models with only the 'username' present. See the Person model for more information.",
        "tags": [
          "User"
        ],
        "operationId": "Get Users_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "bio",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "company",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "admin",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Create a user. See the Person model for more information.",
        "tags": [
          "User"
        ],
        "operationId": "Add User_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The person model specifying the values of the object to create. It is not a requirement to construct a complete model object.",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/users/{user_id}": {
      "get": {
        "description": "Get a user. Non administrative requests can only access users liked through a team relationship. See the Person model for more information.",
        "tags": [
          "User"
        ],
        "operationId": "Get User_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the person ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update a user. For non administrative requests only self updates are permitted. See the Person model for more information.",
        "tags": [
          "User"
        ],
        "operationId": "Update User_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the person ID."
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The user model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a user. Only administrative requests can delete users. It is not possible to delete the account of the requesting user. See the Person model for more information. ",
        "tags": [
          "User"
        ],
        "operationId": "Remove User_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the person ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/extensions/{extension_id}": {
      "get": {
        "description": "Get an extension.  See the Extension model for more information.",
        "tags": [
          "Extension"
        ],
        "operationId": "Get Extension_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "extension_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the extension ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Extension"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update an extension. See the Extension model for more information.",
        "tags": [
          "Extension"
        ],
        "operationId": "Update Extension_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "extension_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the extension ID."
          },
          {
            "name": "extension",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The extension model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/Extension"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Extension"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete an extension. See the Extension model for more information.",
        "tags": [
          "Extension"
        ],
        "operationId": "Remove Extension_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "extension_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the extension ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/keys": {
      "get": {
        "description": "Get a collection of all access keys. See the Access Key model for more information.",
        "tags": [
          "Key"
        ],
        "operationId": "Get Access Keys_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "publicKey",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessKey"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Create an access key.  See the Access Key model for more information.",
        "tags": [
          "Key"
        ],
        "operationId": "Add Access Key_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AccessKey"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/keys/{key_id}": {
      "get": {
        "description": "Get an access key. See the Access Key model for more information.",
        "tags": [
          "Key"
        ],
        "operationId": "Get Access Key_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the access key ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AccessKey"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update access key.  See the Access Key model for more information.",
        "tags": [
          "Key"
        ],
        "operationId": "Update Access Key_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the incident ID."
          },
          {
            "name": "key",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The access key model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/AccessKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AccessKey"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete an access key.  See the Access Key model for more information.",
        "tags": [
          "Key"
        ],
        "operationId": "Remove Access Key_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the access key ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/projects": {
      "get": {
        "description": "Get a collection of projects. See the Project model for more information.",
        "tags": [
          "Project"
        ],
        "operationId": "Get Projects_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Create a Project.  See the Project model for more information.",
        "tags": [
          "Project"
        ],
        "operationId": "Add Project_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The project model specifying the values of the object to create. It is not a requirement to construct a complete model object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/projects/{project_id}": {
      "get": {
        "description": "Get a Project. See the Project model for more information.",
        "tags": [
          "Project"
        ],
        "operationId": "Get Project_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the project ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update a project.  See the Project model for more information.",
        "tags": [
          "Project"
        ],
        "operationId": "Update Project_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the project ID."
          },
          {
            "name": "project",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The project model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a project. Only owned projects can be deleted. See the Project model for more information. ",
        "tags": [
          "Project"
        ],
        "operationId": "Remove Project_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the project ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/engines/{engine_id}/nodes": {
      "get": {
        "description": "Get a list of nodes supported by the engine. See the Node model for more information.",
        "tags": [
          "Engine"
        ],
        "operationId": "Get Engine Nodes_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "engine_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent engine ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/engines/{engine_id}/structures": {
      "get": {
        "description": "Get a list of node hierarchal relationship structures supported by the engine.",
        "tags": [
          "Engine"
        ],
        "operationId": "Get Engine Structures_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "engine_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent engine ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/extensions/{extension_id}/settings/{setting_id}": {
      "get": {
        "description": "Get a collection of fields that make up an extension setting. See the Setting Field model for more information.",
        "tags": [
          "Setting"
        ],
        "operationId": "Get Extension Setting_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "extension_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent extension ID."
          },
          {
            "name": "setting_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the setting ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SettingField"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update an extension setting field.  See the Setting Field model for more information.",
        "tags": [
          "Setting"
        ],
        "operationId": "Update Extension Setting_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "extension_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent extension ID."
          },
          {
            "name": "setting_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent setting ID."
          },
          {
            "name": "field",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The setting field model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/SettingField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SettingField"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/dispatchers": {
      "get": {
        "description": "Get a collection of system dispatchers. See the Dispatcher model for more information.",
        "tags": [
          "Dispatch"
        ],
        "operationId": "Get Dispatchers_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dispatcher"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/dispatchers/{dispatcher_id}/protocols": {
      "get": {
        "description": "Get a collection of all protocols for a dispatcher. See the Dispatcher Protocol model for more information.",
        "tags": [
          "Dispatch"
        ],
        "operationId": "Get Dispatcher Protocols_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dispatcher_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent dispatcher ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DispatcherProtocol"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/subscriptions": {
      "get": {
        "description": "Get a collection of subscriptions. See the Subscriptions model for more information.",
        "tags": [
          "Subscription"
        ],
        "operationId": "Get Subscriptions_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "topics",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "dispatcher",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "(This is the dispatcher id) Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Create a new Subscription.  See the Subscription model for more information.",
        "tags": [
          "Subscription"
        ],
        "operationId": "Add Subscription_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscription",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The subscription model specifying the values of the object to create. It is not a requirement to construct a complete model object.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/subscriptions/{subscription_id}": {
      "get": {
        "description": "Get a subscription. See the Subscription model for more information.",
        "tags": [
          "Subscription"
        ],
        "operationId": "Get Subscription_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Update a subscription.  See the Subscription model for more information.",
        "tags": [
          "Subscription"
        ],
        "operationId": "Update Subscription_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the subscription ID."
          },
          {
            "name": "subscription",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The subscription model specifying the values to be updated. It is not a requirement to construct a complete model object. Fields not set will be ignored and existing values will persist. ",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a subscription. See the Subscription model for more information. ",
        "tags": [
          "Subscription"
        ],
        "operationId": "Remove Subscription_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscription_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the subscription ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/incidents/{incident_id}": {
      "get": {
        "description": "Get an incident. See the Incident model for more information.",
        "tags": [
          "Incident"
        ],
        "operationId": "Get Incident_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "incident_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the incident ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Incident"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/sectors/{sector_id}/nodes/{node_id}/firmwares/{firmware_id}": {
      "put": {
        "description": "Instruct a hardware node to be updated with a firmware package.",
        "tags": [
          "Firmware"
        ],
        "operationId": "Update Node Firmware_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the sector ID."
          },
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the node ID."
          },
          {
            "name": "firmware_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the firmware ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/firmwares": {
      "get": {
        "description": "Get a collection of registered firmware packages. See the Firmware model for more information.",
        "tags": [
          "Firmware"
        ],
        "operationId": "Get Firmwares_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Firmware"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Upload new firmware package.",
        "tags": [
          "Firmware"
        ],
        "operationId": "Upload Firmware_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/firmwares/{firmware_id}": {
      "get": {
        "description": "Get a firmware metadata model. See the Firmware model for more information.",
        "tags": [
          "Firmware"
        ],
        "operationId": "Get Firmware_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firmware_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the firmware ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Firmware"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a firmware metadata model. See the Firmware model for more information.",
        "tags": [
          "Firmware"
        ],
        "operationId": "Remove Firmware_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firmware_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the firmware ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/audits": {
      "get": {
        "description": "Get a collection of system audits. See the Audit model for more information.",
        "tags": [
          "Audit"
        ],
        "operationId": "Get Audits_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "format": "date-time",
            "description": "The latest point in time that the results should include. By default this value is set to the time of the request. The value can be specified either as a unix epoch timestamp or in the string format \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\""
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "format": "date-time",
            "description": "The earliest point in time that the results should include. By default this value is set to 10080 mins prior to the time of the request. The value can be specified either as a unix epoch timestamp or in the string format \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\""
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "enum": [
              "AUTHENTICATED",
              "CREATED",
              "MODIFIED",
              "DELETED",
              "INSTALLED",
              "OTHER"
            ],
            "type": "string",
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "actingUserId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "targetId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "targetType",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Audit"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/engines": {
      "get": {
        "description": "Get a list of registered engines. See the Engine model for more information.",
        "tags": [
          "Engine"
        ],
        "operationId": "Get Engines_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Engine"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/extensions": {
      "get": {
        "description": "Get a collection of all extensions. See the Extension model for more information.",
        "tags": [
          "Extension"
        ],
        "operationId": "Get Extensions_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Extension"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Upload an extension. The extension must be in its native format. Do not wrap it in a ZIP or TAR.",
        "tags": [
          "Extension"
        ],
        "operationId": "Upload Extension_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Extension"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/incidents": {
      "get": {
        "description": "Get a collection of all incidents. See the Incident model for more information.",
        "tags": [
          "Incident"
        ],
        "operationId": "Get Incidents_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "format": "date-time",
            "description": "The earliest point in time that the results should include. By default this value is set to 10080 mins prior to the time of the request. The value can be specified either as a unix epoch timestamp or in the string format \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\""
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "format": "date-time",
            "description": "The latest point in time that the results should include. By default this value is set to the time of the request. The value can be specified either as a unix epoch timestamp or in the string format \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\""
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "silenced",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "guiltySectorId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "guiltyNodeId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "guiltyPropertyId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Incident"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/messages": {
      "get": {
        "description": "Get a collection of messages. See the Message model for more information.",
        "tags": [
          "Message"
        ],
        "operationId": "Get Messages_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "read",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "sender",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "subject",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "message",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Message"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/sectors/{sector_id}/nodes": {
      "get": {
        "description": "Get a collection of nodes. See the Node model for more information.",
        "tags": [
          "Node"
        ],
        "operationId": "Get Sector Nodes_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent sector ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "silent",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "firmware",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "reachable",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "installedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Creates a request to manually install a node into a sector. See the Node model for more information.",
        "tags": [
          "Node"
        ],
        "operationId": "Add Sector Node_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent sector ID."
          },
          {
            "name": "node",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "description": "The node model specifying the values to be installed. It is not a requirement to construct a complete model object. ",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/sectors/{sector_id}/projects": {
      "get": {
        "description": "Get a collection of projects associated with a sector. See the Project model for more information.",
        "tags": [
          "Project"
        ],
        "operationId": "Get Sector Projects_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent sector ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/teams/{team_id}/projects": {
      "get": {
        "description": "Get a collection of projects associated with a team. See the Project model for more information.",
        "tags": [
          "Project"
        ],
        "operationId": "Get Team Projects_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent team ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/teams/{team_id}/projects/{project_id}": {
      "put": {
        "description": "Add a project to a team. Only owned projects can be added to owned teams. See the Project and Team models for more information.",
        "tags": [
          "Project"
        ],
        "operationId": "Add Project to Team_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the project ID."
          },
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the team ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Remove a project from a team. Only owned projects can be removed from owned teams.",
        "tags": [
          "Project"
        ],
        "operationId": "Remove Project from Team_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the project ID."
          },
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the team ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/sectors/{sector_id}/nodes/{node_id}/properties": {
      "get": {
        "description": "Get a collection of properties for a node. See the Property model for more information.",
        "tags": [
          "Property"
        ],
        "operationId": "Get Node Properties_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent sector ID."
          },
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent node ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "unitDisplay",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "unitDescription",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "maxOperationalValue",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "minOperationalValue",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "maxAssignableValue",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "minAssignableValue",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "readOnly",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "sensitivity",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "silent",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "maxAlertValue",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "minAlertValue",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "alertValue",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Property"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/projects/{project_id}/sectors/{sector_id}": {
      "put": {
        "description": "Add a sector to a project. Only owned sectors can be added to owned projects. See the Project and Sector models for more information.",
        "tags": [
          "Sector"
        ],
        "operationId": "Add Sector to Project_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the project ID."
          },
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the sector ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Remove a sector from a project. Only owned sectors can be removed from owned projects.",
        "tags": [
          "Sector"
        ],
        "operationId": "Remove Sector from Project_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the project ID."
          },
          {
            "name": "sector_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the sector ID."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/projects/{project_id}/sectors": {
      "get": {
        "description": "Get a collection of sectors associated with a project. See the Sector model for more information.",
        "tags": [
          "Sector"
        ],
        "operationId": "Get Project Sectors_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the project ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "model",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "addresses",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "manufacturer",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "silent",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "engineId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sector"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/extensions/{extension_id}/settings": {
      "get": {
        "description": "Get a collection of all settings for an extension. See the Setting model for more information.",
        "tags": [
          "Setting"
        ],
        "operationId": "Get Extension Settings_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "extension_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the extension ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Setting"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/projects/{project_id}/teams": {
      "get": {
        "description": "Get a collection of teams associated with a project. See the Team model for more information.",
        "tags": [
          "Team"
        ],
        "operationId": "Get Project Teams_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent project ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "permissions",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/teams/{team_id}/members/{user_id}": {
      "put": {
        "description": "Add a user to a team. Only owned teams can add members. See the Person and Team models for more information.",
        "tags": [
          "User"
        ],
        "operationId": "Add User to Team_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the team ID."
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the person ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Remove a user from a team. Only owned teams can remove other users. Users can remove themselves from any team they are a member of.",
        "tags": [
          "User"
        ],
        "operationId": "Remove User from Team_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the team ID."
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the person ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/teams/{team_id}/members": {
      "get": {
        "description": "Get a collection of users associated with a team. See the Person model for more information.",
        "tags": [
          "User"
        ],
        "operationId": "Get Team Users_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The URI path must specify the parent team ID."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated and the first page of results is returned. The desired page number can be targeted using this parameter. e.g. page=2 would return the second page of results."
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "integer",
            "format": "int64",
            "description": "Endpoints that return collections are automatically paginated with 10 results per page . The desired number of results per page can be set using this parameter. e.g. perPage=20 would return the 20 results on each page."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "It is possible to restrict data models response fields in order to reduce response size. It is possible to specify the fields of the returning model that should be populated with data using a comma separated list of field name. e.g. fields=name,createdAt,updatedAt"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The response collection can be sorted into an order based on a specific field value.  The parameter expects a field name from the response model. It is possible to prefix the field name with a minus sign (-) to invert the sort order. e.g. sort=createdAt or sort=-createdAt "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "bio",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "company",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "createdAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "updatedAt",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "admin",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Apply a search filter specifically for this model field. The parameter takes a collection of comma separated values that are interpreted  as 'OR' statements. e.g. 'name=foo,baa,lee' will filter the search so that field name must be equal to 'foo' or 'baa' or 'lee'. The query comparator that prefixes the first value can be extended to customise the meaning of the filter condition. Adding an additional '=' creates a 'LIKE' filter instead of 'EQUALS'. e.g. 'name==am' would return all results that  where the model field 'name' is 'LIKE' 'am'. So 'Sam', 'Pam', 'Amber' etc. are valid results. Numerical based fields can use the '>' and '<' to respectively query values that are greater than and smaller than. e.g. 'value=>10' will return only models where the field value is greater than 10. Simple collection fields can use the '^' prefix to indicate a 'CONTAINS' filter. e.g. 'values=^foo' will only return models whether the values field collection contains the value 'foo'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    }
  },
  "definitions": {
    "AccessKeyState": {
      "title": "Access Key State",
      "description": "A collection of values that can be used to define an access keys status.",
      "type": "string",
      "enum": [
        "ACTIVE",
        "INACTIVE"
      ]
    },
    "SettingField": {
      "title": "Setting Field",
      "description": "@ Deprecated - This model is scheduled to be replaced with a simpler design. | This model represents an HTML field representation.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The HTML input tag type. See the Setting Field Type model for more information.  ",
          "$ref": "#/definitions/SettingFieldType"
        },
        "name": {
          "description": "Specifies the name of an <input> element.",
          "type": "string"
        },
        "label": {
          "description": "Specifies the label of an <input> element.",
          "type": "string"
        },
        "min": {
          "description": "Specifies a minimum value for an <input> element.",
          "type": "integer",
          "format": "int64"
        },
        "max": {
          "description": "Specifies the maximum value for an <input> element.",
          "type": "integer",
          "format": "int64"
        },
        "maxLength": {
          "description": "Specifies the maximum number of characters allowed in an <input> element.",
          "type": "integer",
          "format": "int64"
        },
        "step": {
          "description": "Specifies the legal number intervals for an input field.",
          "type": "integer",
          "format": "int64"
        },
        "pattern": {
          "description": "Specifies a regular expression that an <input> element's value is checked against.",
          "type": "string"
        },
        "readOnly": {
          "description": "Specifies that an input field is read-only.",
          "type": "boolean"
        },
        "required": {
          "description": "Specifies that an input field must be filled out before submitting the form.",
          "type": "boolean"
        },
        "checked": {
          "description": "Specifies that an <input> element should be pre-selected when the page loads (for type=\"checkbox\" or type=\"radio\").",
          "type": "boolean"
        },
        "value": {
          "description": "Specifies the value of an <input> element.",
          "type": "string"
        },
        "order": {
          "description": "The order that the field should be displayed in relative to other fields.",
          "type": "integer",
          "format": "int64"
        },
        "options": {
          "description": "For fields that define collections the options for the fields are contained here.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingField"
          }
        }
      }
    },
    "SettingFieldType": {
      "title": "Setting Field Type",
      "description": "A collection of values that can be used to define a setting field type. This model describes the input types of the <input> element.",
      "type": "string",
      "enum": [
        "TEXT",
        "PASSWORD",
        "TEL",
        "URL",
        "EMAIL",
        "BOOLEAN",
        "RADIO",
        "CHECKBOX",
        "LIST",
        "COLOR",
        "DATE",
        "DATE_TIME",
        "TIME",
        "NUMBER",
        "RANGE"
      ]
    },
    "Person": {
      "title": "Person",
      "description": "Each user in Halo is defined as a person.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        },
        "name": {
          "description": "The persons real name. e.g. John Doe. Required to create.",
          "type": "string"
        },
        "email": {
          "description": "The persons email address. This must be unique. Required to create.",
          "type": "string"
        },
        "bio": {
          "description": "An optional person bio.",
          "type": "string"
        },
        "company": {
          "description": "An optional company that the person works for or is associated with.",
          "type": "string"
        },
        "secret": {
          "description": "The users root credential password. This value is never returned. Required to create.",
          "type": "string"
        },
        "status": {
          "description": "The status of the persons account determines whether they can use their account or not. See Person State model for more information.",
          "$ref": "#/definitions/PersonState"
        },
        "createdAt": {
          "description": "A timestamp of when the resource was created. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "description": "A timestamp of when the resource was last updated. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "admin": {
          "description": "A boolean flag designating whether the user is a system administrator.",
          "type": "boolean"
        },
        "username": {
          "description": "A unique username. This name is available system wide for other users to be able to search for collaborators. Required to create.",
          "type": "string"
        }
      }
    },
    "AccessKey": {
      "title": "Access Key",
      "description": "When calling Halo APIs, you must authenticate each request using a set of API credentials. Halo associates a set of API credentials with a specific account, and Halo calls these credentials 'Access Keys'. It is strongly recommended that you use  Access Keys for API access and not your accounts root credentials. ",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        },
        "publicKey": {
          "description": "The public part of the system generated access key. This is the equivalent of your API username. ",
          "type": "string"
        },
        "privateKey": {
          "description": "The private part of the system generated access key. This is the equivalent of your API password. ",
          "type": "string"
        },
        "createdAt": {
          "description": "A timestamp of when the resource was created. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the access key determines whether the credentials are enabled. See Access Key State model for more information.",
          "$ref": "#/definitions/AccessKeyState"
        }
      }
    },
    "Message": {
      "title": "Message",
      "description": "Messages are the end product of the delivery process from the Halo internal message dispatcher. Subscriptions that implement the Message dispatcher will deliver their broadcasts via messages.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        },
        "read": {
          "description": "A flag specifying whether the message has been read yet. ",
          "type": "boolean"
        },
        "sender": {
          "description": "The message sender. If the message originated from an automated process this will be Halo, otherwise the users username is present.",
          "type": "string"
        },
        "subject": {
          "description": "The message subject. ",
          "type": "string"
        },
        "message": {
          "description": "The actual message. ",
          "type": "string"
        },
        "tags": {
          "description": "An optional collection of user defined tags to help search and organise messages. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categories": {
          "description": "An optional collection of user defined values to help sort and organise messages.  These are similar to folders in email.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "description": "A timestamp of when the resource was created. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "description": "A timestamp of when the resource was last updated. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AuditAction": {
      "title": "Audit Action",
      "description": "A collection of values that can be used to define an audit action.",
      "type": "string",
      "enum": [
        "AUTHENTICATED",
        "CREATED",
        "MODIFIED",
        "DELETED",
        "INSTALLED",
        "OTHER"
      ]
    },
    "Dispatcher": {
      "title": "Dispatcher",
      "description": "Halo provides internal hooks that broadcast events on defined 'channels'. Dispatchers provide a dynamic delivery mechanism that will dispatch messages in a specific medium.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. Dispatchers are extension based resources and so this ID does not conform to standard system resource ID formats. This is a 10 character alpha-numeric ID. ",
          "type": "string"
        },
        "name": {
          "description": "A human readable name assigned to the dispatcher.",
          "type": "string"
        },
        "description": {
          "description": "A human readable description assigned to the dispatcher.",
          "type": "string"
        }
      }
    },
    "DispatcherProtocol": {
      "title": "Dispatcher Protocol",
      "description": "Dispatchers need to define a minimum of 1 protocol. Protocols define the delivery protocols defined by the dispatcher.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type name assigned to the dispatcher protocol.",
          "type": "string"
        },
        "options": {
          "description": "An optional collection of the protocol definition options required to make the dispatcher function as a dispatcher. Note that this is the definition not the actual stored value. e.g. An email dispatcher needs the user to define the email addresses that the message should be dispatched to.",
          "$ref": "#/definitions/SettingFieldType"
        }
      }
    },
    "Engine": {
      "title": "Engine",
      "description": "Engines are a type of extension that provide Halo support for specific hardware. Engines are generally proprietary extensions provided by the manufacturers to allow Halo support for their internal communication protocols. ",
      "type": "object",
      "properties": {
        "manufacturer": {
          "description": "The manufacturer of the hardware that the engine provides support for.",
          "type": "string"
        },
        "model": {
          "description": "The model of the hardware that the engine provides support for.",
          "type": "string"
        },
        "description": {
          "description": "A human readable description of the engine.",
          "type": "string"
        },
        "id": {
          "description": "A unique, system assigned record identifier. Engines are extension based resources and so this ID does not conform to standard system resource ID formats. This is a 10 character alpha-numeric ID. ",
          "type": "string"
        }
      }
    },
    "Extension": {
      "title": "Extension",
      "description": "Extension are independent packages that can be installed/removed at runtime by users to extend the core Halo functionality. ",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. Engines are extension based resources and so this ID does not conform to standard system resource ID formats. This is a 10 character alpha-numeric ID. ",
          "type": "string"
        },
        "title": {
          "description": "A human readable title assigned to the extension.",
          "type": "string"
        },
        "name": {
          "description": "A unique package name assigned to the extension. This is usually a code based workspace assignment.",
          "type": "string"
        },
        "description": {
          "description": "A human readable description of the extension.",
          "type": "string"
        },
        "author": {
          "description": "The extension author.",
          "type": "string"
        },
        "version": {
          "description": "The extension version. Although no format is imposed on extension versions, developers are encouraged to use semantic format.  For more info see http://semver.org/",
          "type": "string"
        },
        "license": {
          "description": "The type of license that the extension id published under.",
          "type": "string"
        },
        "frameworks": {
          "description": "A description of the supported core Halo framework versions that are supported by the extension. This takes the format '<comparator><major>.<minor>.<patch>'. e.g. '>=1.0.0'",
          "type": "string"
        },
        "category": {
          "description": "The category that the extension is categorised under.",
          "type": "string"
        },
        "homepage": {
          "description": "An optional URL of the extension homepage.",
          "type": "string"
        },
        "repository": {
          "description": "An optional URL of the extension repository.",
          "type": "string"
        },
        "status": {
          "description": "The status of the extension determines whether the extension is enabled. See Extension State model for more information.",
          "$ref": "#/definitions/ExtensionState"
        },
        "icon": {
          "description": "An optional Base64 encoded icon."
        }
      }
    },
    "Incident": {
      "title": "Incident",
      "description": "Incidents are similar to conventional alarms. They are time sensitive records that are generated and track the fluctuation of hardware properties that fall outside their standard operational parameters.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        },
        "silenced": {
          "description": "If any of the system resources from which the incident originated have a silent flag set to true this value will be true. Otherwise it will be false. ",
          "type": "boolean"
        },
        "guiltySector": {
          "description": "The sector that hosts the node or property that was responsible for the incident generation.",
          "$ref": "#/definitions/Sector"
        },
        "guiltyNode": {
          "description": "The node that was responsible or the node that hosts the property that is responsible for the incident generation.",
          "$ref": "#/definitions/Node"
        },
        "guiltyProperty": {
          "description": "The optional property that was responsible for the incident generation.",
          "$ref": "#/definitions/Property"
        },
        "history": {
          "description": "A collection of historical state changes associated with an incident. See Incident Event for more information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncidentEvent"
          }
        },
        "details": {
          "description": "Detailed information pertaining to the incident. See Incident Event for more information.",
          "$ref": "#/definitions/IncidentDetail"
        },
        "status": {
          "description": "The current status of the incident. See Incident State for more information.",
          "$ref": "#/definitions/IncidentState"
        }
      }
    },
    "IncidentState": {
      "title": "Incident State",
      "description": "A collection of values that can be used to define an incident status.",
      "type": "string",
      "enum": [
        "GREEN",
        "YELLOW",
        "RED"
      ]
    },
    "Node": {
      "title": "Node",
      "description": "Nodes are the fundamental hardware devices that make up a sector. They are the physical or virtual devices that make up a hardware distribution network.",
      "type": "object",
      "properties": {
        "index": {
          "description": "The addressable index of the node in the sector network. This should be in a parent -> child  format with the root/head node first followed by a series of progressive child nodes separated  by '>'. e.g. Root > A Child of 'Root' > B Child of 'A Child of Root'. This index is required to install a node manually.",
          "type": "string"
        },
        "name": {
          "description": "The manufacturer specified name of the node. This is normally an extended version of the device acronym specified as the type.",
          "type": "string"
        },
        "description": {
          "description": "The manufacturers informational description of the node.",
          "type": "string"
        },
        "type": {
          "description": "The manufacturer specified typ of the node. This is normally compact acronym version of the specified name.",
          "type": "string"
        },
        "silent": {
          "description": "A flag specifying whether the node should be treated as silent. This flag does not alter any behaviour in the system. It simply propagates its value to incidents that originate from this node. This propagated flag can optionally be included in searches, reporting etc.",
          "type": "boolean"
        },
        "firmware": {
          "description": "The firmware version operating on the node.",
          "type": "string"
        },
        "status": {
          "description": "The current status of the node. See the Node State model for more information.",
          "$ref": "#/definitions/NodeState"
        },
        "reachable": {
          "description": "A flag specifying if the node is reachable by Halo.",
          "type": "boolean"
        },
        "installedAt": {
          "description": "A timestamp of when the node was installed or registered in Halo. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "description": "A timestamp of when the resource was last updated. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        },
        "extra": {
          "description": "A collection of custom data that can be bound to the node. See the Extra model for more information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extra"
          }
        },
        "functions": {
          "description": "A collection of defined functions that apply to this node. This is currently an experimental property. See the Node Function model for more information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeFunction"
          }
        }
      }
    },
    "NodeState": {
      "title": "Node State",
      "description": "A collection of values that can be used to define a node status.",
      "type": "string",
      "enum": [
        "GREEN",
        "YELLOW",
        "ORANGE",
        "RED"
      ]
    },
    "Property": {
      "title": "Property",
      "description": "Properties are the variables that make up nodes. These are the readable and writable values.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is specified to allow conversion. See the Property Type model for more information.  ",
          "$ref": "#/definitions/PropertyType"
        },
        "name": {
          "description": "A human readable name assigned by the manufacturer to the property.",
          "type": "string"
        },
        "description": {
          "description": "A human readable descrition assigned by the manufacturer to the property.",
          "type": "string"
        },
        "unitDisplay": {
          "description": "The units that the property value is measured in.",
          "type": "string"
        },
        "unitDescription": {
          "description": "A description of the shorthand version of the units.",
          "type": "string"
        },
        "value": {
          "description": "The actual value of the property. Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified in the type field. ",
          "type": "string"
        },
        "maxOperationalValue": {
          "description": "The optional maximum operational value of the property. Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified in the type field. ",
          "type": "string"
        },
        "minOperationalValue": {
          "description": "The optional minimum operational value of the property. Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified in the type field. ",
          "type": "string"
        },
        "maxAssignableValue": {
          "description": "The optional maximum value that can be assigned to the property if it can have a value assigned to it. Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified in the type field. ",
          "type": "string"
        },
        "minAssignableValue": {
          "description": "The optional minimum value that can be assigned to the property if it can have a value assigned to it. Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified in the type field. ",
          "type": "string"
        },
        "readOnly": {
          "description": "A flag specifying whether the value can only be read or whether it can also be written to.",
          "type": "boolean"
        },
        "sensitivity": {
          "description": "Halo uses smoothing algorithms to control the sensitivity of property value interpretation. This sensitivity value must be between 0 and 100. The closer to 100, the more sensitive Halo's interpretation of the true values. The closer to 0 the greater the smoothing effect.",
          "type": "integer",
          "format": "int64"
        },
        "recentValues": {
          "description": "A collection of the value over the last 30 mins.  Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified in the type field. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "silent": {
          "description": "A flag specifying whether the property should be treated as silent. This flag does not alter any behaviour in the system. It simply propagates its value to incidents that originate from this property. This propagated flag can optionally be included in searches, reporting etc.",
          "type": "boolean"
        },
        "maxAlertValue": {
          "description": "The optional maximum value that can be reached by the property value before it will instigate an enquiry into the suspect behaviour. Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified in the type field. ",
          "type": "string"
        },
        "minAlertValue": {
          "description": "The optional minimum value that can be reached by the property value before it will instigate an enquiry into the suspect behaviour. Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified in the type field. ",
          "type": "string"
        },
        "alertValue": {
          "description": "The optional boolean or string value that can be set by the property value before it will instigate an enquiry into the suspect behaviour. Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified in the type field. ",
          "type": "string"
        },
        "extra": {
          "description": "A collection of custom data that can be bound to the property. See the Extra model for more information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extra"
          }
        },
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        }
      }
    },
    "PropertyType": {
      "title": "Property Type",
      "description": "A collection of values that can be used to define a property type. Due the way that different languages handle polymorphism and for the convenience of the SDK compatibility all values are represented as String and the actual type is independently specified using the values in this model. ",
      "type": "string",
      "enum": [
        "NUMBER",
        "PRECISION",
        "BOOLEAN",
        "STRING"
      ]
    },
    "Sector": {
      "title": "Sector",
      "description": "Sectors represent a single head end node (with optional multiple failover head nodes) and all the connected downstream nodes.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        },
        "name": {
          "description": "A human readable name assigned to the project. Required to create.",
          "type": "string"
        },
        "description": {
          "description": "An optional human readable description assigned to the project.",
          "type": "string"
        },
        "model": {
          "description": "The engine model that the sector is hosting. This must match the model specified in the active engine extension exactly. See Engine model for more information.  Required to create.",
          "type": "string"
        },
        "addresses": {
          "description": "A collection of IPv4 or IPv6 addresses (or sockets) for the destination hardware headend  node. The first address in the collection is treated as the primary head end node. All subsequent addresses are treated as failover head end nodes. e.g. 1.1.1.1 or 1.1.1.1:222 or 2001:0db8:0a0b:12f0:0000:0000:0000:0001 or 2001:0db8:0a0b:12f0:0000:0000:0000:0001::80.  Required to create.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "proxy": {
          "description": "The optional http(s) proxy server used for connections to the hardware. See Proxy model for more information.",
          "$ref": "#/definitions/Proxy"
        },
        "manufacturer": {
          "description": "The engine manufacturer that the sector is hosting. This must match the manufacturer specified in the active engine extension exactly. See Engine model for more information.  Required to create.",
          "type": "string"
        },
        "status": {
          "description": "The current status of the sector. See the Sector State model for more information.",
          "$ref": "#/definitions/SectorState"
        },
        "silent": {
          "description": "A flag specifying whether the sector should be treated as silent. This flag does not alter any behaviour in the system. It simply propagates its value to incidents that originate from this sector. This propagated flag can optionally be included in searches, reporting etc.",
          "type": "boolean"
        },
        "engineId": {
          "description": "The engine ID that the sector is hosting. See Engine model for more information. ",
          "type": "string"
        },
        "createdAt": {
          "description": "A timestamp of when the resource was created. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "description": "A timestamp of when the resource was last updated. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "extra": {
          "description": "A collection of custom data that can be bound to the node. See the Extra model for more information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extra"
          }
        },
        "owner": {
          "description": "The project owner. See Person model for more information.",
          "$ref": "#/definitions/Person"
        }
      }
    },
    "SectorState": {
      "title": "Sector State",
      "description": "A collection of values that can be used to define a sector status.",
      "type": "string",
      "enum": [
        "ACTIVE",
        "PASSIVE"
      ]
    },
    "Subscription": {
      "title": "Subscription",
      "description": "Subscriptions are the binding model that connects system topic broadcasts with dispatchers. A subscription listens for broadcasts of specific topics and passes them to the dispatcher.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        },
        "name": {
          "description": "A human readable name assigned to the project. Required to create.",
          "type": "string"
        },
        "description": {
          "description": "An optional human readable description assigned to the project.",
          "type": "string"
        },
        "topics": {
          "description": "A collection of topics that the subscription should listen for. Required to create.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dispatcher": {
          "description": "The ID of the dispatcher that the broadcast messages should be passed to. Required to create.",
          "type": "string"
        },
        "protocol": {
          "description": "The dispatcher protocol settings that should be passed to the dispatcher with the broadcast message. See Dispatcher Protocol model for more information.",
          "$ref": "#/definitions/DispatcherProtocol"
        },
        "createdAt": {
          "description": "A timestamp of when the resource was created. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "description": "A timestamp of when the resource was last updated. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Team": {
      "title": "Team",
      "description": "All system resources in Halo are context sensitive. This means that the creation of a resource results in that resource being owned by the creator. Teams are mechanism of grouping users together and subsequently allowing them to access project resources.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        },
        "name": {
          "description": "A human readable name assigned to the project. Required to create.",
          "type": "string"
        },
        "description": {
          "description": "An optional human readable description assigned to the project.",
          "type": "string"
        },
        "updatedAt": {
          "description": "A timestamp of when the resource was last updated. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "description": "A timestamp of when the resource was created. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "permissions": {
          "description": "A collection of permissions assigned to this team. All people who are members of this team will have these permissions when accessing associated project resources. These values can currently be 'create', 'read', 'update' and 'delete'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "description": "The team owner. See Person model for more information.",
          "$ref": "#/definitions/Person"
        }
      }
    },
    "IncidentDetail": {
      "title": "Incident Detail",
      "description": "Actionable information pertaining to an incident. ",
      "type": "object",
      "properties": {
        "name": {
          "description": "A  is a human assignable value for convenience and is not unique.",
          "type": "string"
        },
        "cause": {
          "description": "A description of the conditions that would cause this alarm definition to become active.",
          "type": "string"
        },
        "impact": {
          "description": "A description of the impacts that would result in this alarm definition becoming active.",
          "type": "string"
        },
        "remedy": {
          "description": "A description of the remedy that would resolve this alarm definition if it becomes active.",
          "type": "string"
        },
        "serviceImpact": {
          "description": "A value specifying whether the parent incident is having an impact on the systems service.",
          "type": "boolean"
        },
        "cascadingImpact": {
          "description": "A value specifying whether the parent incident will have a cascading effect to downstream nodes. .",
          "type": "boolean"
        }
      }
    },
    "PersonState": {
      "title": "Person State",
      "description": "A collection of values that can be used to define a persons account status.",
      "type": "string",
      "enum": [
        "ACTIVE",
        "PENDING",
        "SUSPENDED"
      ]
    },
    "Setting": {
      "title": "Setting",
      "description": "All Halo settings are defined via extensions. This model does not contain the actual settings, instead it is the parent meta model that defines whether settings exist.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. Engines are extension based resources and so this ID does not conform to standard system resource ID formats. This is a 10 character alpha-numeric ID. ",
          "type": "string"
        },
        "extension": {
          "description": "The ID of the extension that the settings belong to.",
          "type": "string"
        },
        "description": {
          "description": "A human readable description of the extension setting.",
          "type": "string"
        }
      }
    },
    "AdminFunction": {
      "title": "Admin Function",
      "description": "TODO Documentation",
      "type": "string",
      "enum": [
        "update",
        "initSectors",
        "initAlarms",
        "setClock",
        "reboot"
      ]
    },
    "Audit": {
      "title": "Audit",
      "description": "Whenever a data manipulation transaction is performed, Halo creates a record of the action. You can think of data manipulation transaction as C(reate)U(pdate)D(elete) actions from the CRUD family. These records are called Audits.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        },
        "action": {
          "description": "The definition of the action that was taken resulting in the creating of the audit. See Audit Action for more information.",
          "$ref": "#/definitions/AuditAction"
        },
        "title": {
          "description": "A human readable title of the action that was taken resulting in the creating of the audit.",
          "type": "string"
        },
        "summary": {
          "description": "A short human readable summary of the action that was taken resulting in the creating of the audit.",
          "type": "string"
        },
        "category": {
          "description": "The category name the resource that the action was taken on resulting in the creating of the audit. e.g. sector",
          "type": "string"
        },
        "pre": {
          "description": "A string representation of the resource state before the action was performed.",
          "type": "string"
        },
        "post": {
          "description": "A string representation of the resources state after the action was performed.",
          "type": "string"
        },
        "actionIp": {
          "description": "The IP address of request that requested the action resulting in the creating of the audit.",
          "type": "string"
        },
        "actingUserId": {
          "description": "The unique ID of the user that requested the action that was taken resulting in the creating of the audit.",
          "type": "string"
        },
        "actingUserEmail": {
          "description": "The email of the user that requested the action that was taken resulting in the creating of the audit.",
          "type": "string"
        },
        "targetId": {
          "description": "The unique ID of the target resource the action was taken on resulting in the creating of the audit.",
          "type": "string"
        },
        "createdAt": {
          "description": "A timestamp of when the resource was created. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "IncidentEventType": {
      "title": "Incident Event Type",
      "description": "The type of event that occurred in an incident event",
      "type": "string",
      "enum": [
        "STARTED",
        "CHANGED",
        "ENDED"
      ]
    },
    "ExtensionState": {
      "title": "Extension State",
      "description": "A collection of values that can be used to define an extension status.",
      "type": "string",
      "enum": [
        "ACTIVE",
        "INACTIVE"
      ]
    },
    "Extra": {
      "title": "Extra",
      "description": "'Extra' data provides a way for custom data to be bound to system resources that offer that functionality. In addition to generic custom information Halo provides a collection of reserved keywords that allow predefined functions to be performed. e.g. '@topics' allows custom topics for events to be broadcast on. All reserved keywords start with '@'.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key used to define the types of values that are being specified. This can be a free text entry for custom data or it can be a system reserved key starting with '@'.",
          "type": "string"
        },
        "values": {
          "description": "A collection of string values assigned to the key. What you specify here depends on the key type and value. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "key",
        "values"
      ]
    },
    "IncidentEvent": {
      "title": "Incident Event",
      "description": "Being dynamic, incidents are time sensitive and their state fluctuates time. An incident event is a record of state transitions within an incident.",
      "type": "object",
      "properties": {
        "time": {
          "description": "A timestamp of when the state transition occured. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "description": "A definition constant describing the transition event. See Incident Event Type model for more information.",
          "$ref": "#/definitions/IncidentEventType"
        },
        "status": {
          "description": "The status that the incident state is transitioning to. See Incident State model for more information.",
          "$ref": "#/definitions/IncidentState"
        },
        "details": {
          "description": "A human readable description of what the state transition entailed.",
          "type": "string"
        }
      }
    },
    "NodeFunction": {
      "title": "Node Function",
      "description": "A collection of values that can be used to define a nodes primary functions. This is an experiment property that is being used to help perform reporting analytical information only at the moment.! ",
      "type": "string",
      "enum": [
        "OTHER",
        "ANTENNA"
      ]
    },
    "Project": {
      "title": "Project",
      "description": "All system resources in Halo are context sensitive. This means that the creation of a resource results in that resource being owned by the creator. Projects are mechanism of grouping resources together and subsequently allowing teams to access these resources.",
      "type": "object",
      "properties": {
        "name": {
          "description": "A human readable name assigned to the project. Required to create.",
          "type": "string"
        },
        "description": {
          "description": "An optional human readable description assigned to the project.",
          "type": "string"
        },
        "createdAt": {
          "description": "A timestamp of when the resource was created. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "description": "A timestamp of when the resource was last updated. The format is: \"yyyy-MM-dd'T'HH:mm:ssZ\" e.g. \"2016-02-14T16:32:47-0500\"",
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "description": "The project owner. See Person model for more information.",
          "$ref": "#/definitions/Person"
        },
        "id": {
          "description": "A unique, system assigned record identifier. The ID format is made up as follows: <cluster-id>:<cluster-position> where cluster-id is the id of the cluster. Halo can have a maximum of 32,767 clusters (2^15-1). The cluster-position is the position of the record inside the cluster. Each cluster can handle up to 9,223,372,036,854,780,000 (2^63) records, namely 9,223,372 Trillion of records!",
          "type": "string"
        }
      }
    },
    "Proxy": {
      "title": "Proxy",
      "description": "A proxy server is a server that acts as an intermediary for Halo requests. Halo currently only supports HTTP(S) proxy servers.",
      "type": "object",
      "properties": {
        "active": {
          "description": "A flag defining whether the proxy server should be used.",
          "type": "boolean"
        },
        "host": {
          "description": "The URL of the proxy server. ",
          "type": "string"
        },
        "port": {
          "description": "The port that the proxy server is expecting requests on.",
          "type": "integer",
          "format": "int64"
        },
        "authentication": {
          "description": "A flag defining whether the proxy server is expecting authentication credentials.",
          "type": "boolean"
        },
        "username": {
          "description": "The optional credential username to pass to the proxy server for authentication.",
          "type": "string"
        },
        "password": {
          "description": "The optional credential password to pass to the proxy server for authentication.",
          "type": "string"
        }
      }
    },
    "Firmware": {
      "title": "Firmware",
      "description": "Halo provides the ability to control engine hardware firmware versions. This model is not the actual firmware but rather a representation of the firmware metadata.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique, system assigned record identifier. Engines are extension based resources and so this ID does not conform to standard system resource ID formats. This is a 10 character alpha-numeric ID. ",
          "type": "string"
        },
        "name": {
          "description": "The firmware package human readable name.",
          "type": "string"
        },
        "description": {
          "description": "The firmware package human readable description.",
          "type": "string"
        },
        "manufacturer": {
          "description": "The manufacturer of the hardware supported by the firmware package.",
          "type": "string"
        },
        "model": {
          "description": "The model of the hardware supported by the firmware package.",
          "type": "string"
        },
        "nodes": {
          "description": "A collection of node types that this firmware is compatible with. These nodes match the node types defined by the engine supporting the target hardware.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "The version of the firmware defined in the firmware package .",
          "type": "string"
        }
      }
    }
  }
}