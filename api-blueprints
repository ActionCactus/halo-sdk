FORMAT: 1A
HOST: https://{REPLACE}/api

# Halo SDK
Software Development Kit (SDK) to access the SOLiD Halo RESTful API.

## Authentication
This API uses Basic Authentication for its authentication.

# Group Alarm

## Alarms [/alarms{?page,perPage}]

### Represent Alarms [GET]
Get alarms
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Alarm])

+ Response 400 



## Alarms [/alarms]

### Add Alarm [POST]
Create alarm

+ Request (application/json)
    + Attributes (Alarm)

+ Response 200 (application/json)
    + Attributes (Alarm)

+ Response 400 



## Alarms By Id [/alarms/{id}]

+ Parameters
    + id (string, required)


### Represent Alarm [GET]
Get alarm with specified id

+ Response 200 (application/json)
    + Attributes (Alarm)

### Store Alarm [PUT]
Update alarm with id

+ Response 200 (application/json)
    + Attributes (Alarm)

### Remove Alarm [DELETE]
Delete alarm with id

+ Response 200 
    + Attributes (string)



# Group Admin

## API Functions By Function [/@/functions/{function}]

+ Parameters
    + function (enum[string], required)

        The administrative function to be executed

        + Members
            + `update` 
            + `initSectors` 
            + `initAlarms` 
            + `setClock` 
            + `reboot` 


### Execute Function [PUT]
Execute admin function


## API Settings [/@/settings]

### Represent Settings [GET]
Get system settings

+ Response 200 (application/json)
    + Attributes (Setting)

### Store Settings [PUT]
Update settings

+ Request (application/json)
    + Attributes (Setting)

+ Response 200 (application/json)
    + Attributes (Setting)



# Group User

## Groups Members By Id [/groups/{id}/members{?page,perPage}]

+ Parameters
    + id (string, required)


### Represent Group Users [GET]
Get group users
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, required) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[User])


## Group Members By GroupId And UserId [/group/{groupId}/members/{userId}]

+ Parameters
    + groupId (string, required)

    + userId (string, required)


### Store User in Group [PUT]
Add a member to a group

+ Response 200 
    + Attributes (string)

### Remove User from Group [DELETE]
Remove a member from a group

+ Response 200 
    + Attributes (string)


## Users [/users{?page,perPage}]

### Add User [POST]
Create a user

+ Request (application/json)
    + Attributes (User)

+ Response 200 (application/json)
    + Attributes (User)

### Represent Users [GET]
Get users
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[User])


## Users By Id [/users/{id}]

+ Parameters
    + id (string, required)


### Represent User [GET]
Get user with id

+ Response 200 (application/json)
    + Attributes (User)

### Store User [PUT]
Update user with id

+ Request (application/json)
    + Attributes (User)

+ Response 200 (application/json)
    + Attributes (User)

### Remove User [DELETE]
Delete user with id

+ Response 200 
    + Attributes (string)



# Group Policy

## Groups Policies By Id [/groups/{id}/policies{?page,perPage}]

+ Parameters
    + id (string, required)


### Add Policy to Group [PUT]
Create and add a policy to a group.

+ Request (application/json)
    + Attributes (Policy)

+ Response 200 (application/json)
    + Attributes (Policy)

### Represent Group Policies [GET]
Get policies in group
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Policy])


## Groups Policies By GroupId And PolicyId [/groups/{groupId}/policies/{policyId}]

+ Parameters
    + groupId (string, required)

    + policyId (string, required)


### Represent Group Policy [GET]
Get group policy with id

+ Response 200 (application/json)
    + Attributes (Policy)

### Remove Policy from Group [DELETE]
Delete policy from group with id

+ Response 200 
    + Attributes (string)

### Store Policy in Group [PUT]
Update group policy with id

+ Request (application/json)
    + Attributes (Policy)

+ Response 200 (application/json)
    + Attributes (Policy)



# Group Group

## Groups [/groups{?page,perPage}]

### Add Group [POST]
Create group

+ Request (application/json)
    + Attributes (Group)

+ Response 200 (application/json)
    + Attributes (Group)

### Represent Groups [GET]
Get groups
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Group])


## Groups By Id [/groups/{id}]

+ Parameters
    + id (string, required)


### Represent Group [GET]
Get group with id

+ Response 200 (application/json)
    + Attributes (Group)

### Store Group [PUT]
Update group with id

+ Request (application/json)
    + Attributes (Group)

+ Response 200 (application/json)
    + Attributes (Group)

### Remove Group [DELETE]
Delete group with id

+ Response 200 
    + Attributes (string)



# Group Notification

## Notifications [/notifications{?page,perPage}]

### Add Notification [POST]
Create notification

+ Request (application/json)
    + Attributes (Notification)

+ Response 200 (application/json)
    + Attributes (Notification)

### Represent Notifications [GET]
Get notifications
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Notification])


## Notifications By Id [/notifications/{id}]

+ Parameters
    + id (string, required)


### Represent Notification [GET]
Get notification with id

+ Response 200 (application/json)
    + Attributes (Notification)

### Remove Notification [DELETE]
Delete notification with id

+ Response 200 
    + Attributes (string)

### Store Notification [PUT]
Update notification with id

+ Request (application/json)
    + Attributes (Notification)

+ Response 200 (application/json)
    + Attributes (Notification)



# Group Event

## Sectors Events By Id [/sectors/{id}/events{?page,perPage}]

+ Parameters
    + id (string, required)


### Represent Sector Events [GET]
Get sector events
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Event])


## Users Events By Id [/users/{id}/events{?page,perPage}]

+ Parameters
    + id (string, required)


### Represent User Events [GET]
Get user events
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Event])



# Group Firmware

## Sectors Nodes Firmware By Id And Index [/sectors/{id}/nodes/{index}/firmware]

+ Parameters
    + id (string, required)

    + index (string, required)


### Store Node Firmware [PUT]
Update node firmware

+ Response 200 
    + Attributes (string)



# Group Property

## Sectors Nodes Properties Name By Id [/sectors/{id}/nodes/{index}/properties/{name}]

+ Parameters
    + id (string, required)

    + index (string, required)

    + name (string, required)


### Represent Sector Node Property [GET]
Get property with name

+ Response 200 (application/json)
    + Attributes (Property)

### Store Sector Node Property [PUT]
Update property with name

+ Request (application/json)
    + Attributes (Property)

+ Response 200 
    + Attributes (string)


## Sectors Nodes Properties By Id And Index [/sectors/{id}/nodes/{index}/properties{?page,perPage}]

+ Parameters
    + id (string, required)

    + index (string, required)


### Represent Sector Node Properties [GET]
Get sector node properties
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Property])



# Group Node

## Sectors Nodes By Id [/sectors/{id}/nodes{?page,perPage}]

+ Parameters
    + id (string, required)


### Represent Sector Nodes [GET]
Get nodes
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Node])


## Sectors Nodes By Id [/sectors/{id}/nodes]

+ Parameters
    + id (string, required)


### Add Sector Node [POST]
Create and add a node to a sector

+ Request (application/json)
    + Attributes (Node)

+ Response 200 (application/json)
    + Attributes (Node)


## Sectors Nodes By Id And Index [/sectors/{id}/nodes/{index}]

+ Parameters
    + id (string, required)

    + index (string, required)


### Represent Sector Node [GET]
Get sector node with index

+ Response 200 (application/json)
    + Attributes (Node)

### Remove Sector Node [DELETE]
Delete node from sector with index

+ Response 200 
    + Attributes (string)

### Store Sector Node [PUT]
Update node with index

+ Request (application/json)
    + Attributes (Node)

+ Response 200 (application/json)
    + Attributes (Node)



# Group Snmp

## Sectors Snmps By Id [/sectors/{id}/snmps]

+ Parameters
    + id (string, required)


### Add Sector SNMP [PUT]
Upload a zip file containing the MIB file and the MIB mapper

+ Response 200 
    + Attributes (string)



# Group Sector

## Sectors [/sectors{?page,perPage}]

### Add Sector [POST]
Create a sector

+ Request (application/json)
    + Attributes (Sector)

+ Response 200 (application/json)
    + Attributes (Sector)

### Represent Sectors [GET]
Get sectors
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Sector])


## Sectors By Id [/sectors/{id}]

+ Parameters
    + id (string, required)


### Represent Sector [GET]
Get sector with id

+ Response 200 (application/json)
    + Attributes (Sector)

### Store Sector [PUT]
Update sector with id

+ Request (application/json)
    + Attributes (Sector)

+ Response 200 (application/json)
    + Attributes (Sector)

### Remove Sector [DELETE]
Delete sector with id

+ Response 200 
    + Attributes (string)



# Group Incident

## Incidents [/incidents{?page,perPage}]

### Represent Incidents [GET]
Get incidents
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Incident])


## Sectors Incidents By Id [/sectors/{id}/incidents{?page,perPage}]

+ Parameters
    + id (string, required)


### Represent Sector Incidents [GET]
Get sector incidents
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Incident])


## Sectors Nodes Incidents By Id And Index [/sectors/{id}/nodes/{index}/incidents{?page,perPage}]

+ Parameters
    + id (string, required)

    + index (string, required)


### Represent Sector Node Incidents [GET]
Get sector node incidents
+ Parameters
    + page (number, optional) -

        Page number

        + Default: 1
    + perPage (number, optional) -

        Results per page

        + Default: 10

+ Response 200 (application/json)
    + Attributes (array[Incident])



# Data Structures

## Alarm (object)
Representation of an ALARM definition.

### Properties
+ `id` (string, optional) - The unique system assigned identification of the alarm .
+ `name` (string, optional) - A convenient identifying name. This is a human assignable value for convenience and is not unique.
+ `cause` (string, optional) - A description of the conditions that would cause this alarm definition to become active.
+ `impact` (string, optional) - A description of the impacts that would result in this alarm definition becoming active.
+ `remedy` (string, optional) - A description of the remedy that would resolve this alarm definition if it becomes active.
+ `active` (boolean, optional) - Specifies whether the alarm definition should be actively considered by the system. If this value is `false` the definition is stored but never evaluated.
+ `period` (number, optional) - A time period (defined in snapshots) that constitutes a single experimental period for this alarm definition.
+ `periods` (number, optional) - The number of times the experimental time period should be repeated to define this alarm.
+ `function` (string, optional) - The javascript function that evaluates whether this alarm definition becomes active.
+ `tags` (array[string], optional) - Identifying tags. Predominantly used for search functions.
+ `createdAt` (string, optional) - A system created time stamp recording when this alarm definition was created.
+ `updatedAt` (string, optional) - A system created time stamp recording when this alarm definition was last modified.
+ `statistic` (enum, optional) - The mathematical function used to pass the values of a single period.
    + `AVG`
    + `MAX`
    + `MIN`
    + `SUM`


## Event (object)
Representation of an Event

### Properties
+ `id` (string, optional) 
+ `method` (enum, optional) 
    + `POST`
    + `PUT`
    + `GET`
    + `DELETE`
+ `resource` (string, optional) 
+ `actor` (User, optional) 
+ `payload` (string, optional) 
+ `createdAt` (string, optional) 


## User (object)
Representation of a User

### Properties
+ `id` (string, optional) 
+ `name` (string, optional) 
+ `email` (string, optional) 
+ `bio` (string, optional) 
+ `company` (string, optional) 
+ `secret` (string, optional) 
+ `eventsUrl` (string, optional) 
+ `createdAt` (string, optional) 
+ `updatedAt` (string, required) 


## Group (object)
Representation of a Group

### Properties
+ `id` (string, optional) 
+ `name` (string, optional) 
+ `description` (string, optional) 
+ `policiesUrl` (string, optional) 
+ `membersUrl` (string, optional) 
+ `createdAt` (string, optional) 
+ `updatedAt` (string, optional) 


## Node (object)
Representation of a Node

### Properties
+ `index` (string, optional) 
+ `name` (string, optional) 
+ `type` (enum, optional) 
    + `BIU`
    + `DOU`
    + `HRDU`
    + `HMRU`
    + `HARU`
    + `LRDU`
    + `LMRU`
    + `LARU`
    + `MDBU`
    + `MROU`
    + `ODU`
    + `OEU`
    + `ROU`
+ `state` (enum, optional) 
    + `NORMAL`
    + `LINK_FAIL`
    + `FAIL`
    + `UNUSED`
    + `UNKNOWN`
+ `propertiesUrl` (string, optional) 
+ `incidentsUrl` (string, optional) 


## Incident (object)
Representation of an Incident

### Properties
+ `id` (string, optional) 
+ `guiltyNode` (Node, optional) 
+ `alarm` (Alarm, optional) 
+ `createdAt` (string, optional) 
+ `createdFor` (string, optional) 


## Notification (object)
Representation of a Notification

### Properties
+ `id` (string, optional) 
+ `name` (string, optional) 
+ `description` (string, optional) 
+ `tags` (array[string], optional) 
+ `deliveryMethod` (enum, optional) 
    + `HTTP`
    + `EMAIL`
    + `ATOM`
    + `SNMP`
    + `NONE`
+ `deliveryOptions` (string, optional) 
+ `createdAt` (string, optional) 
+ `updatedAt` (string, optional) 


## Policy (object)
Representation of a Policy

### Properties
+ `id` (string, optional) 
+ `name` (string, optional) 
+ `description` (string, optional) 
+ `permission` (string, optional) 
+ `createdAt` (string, optional) 
+ `updatedAt` (string, optional) 


## Property (object)
Representation of a Property

### Properties
+ `name` (string, optional) 
+ `type` (enum, optional) 
    + `INTEGER`
    + `PRECISION`
    + `BOOLEAN`
    + `STRING`
+ `value` (string, optional) 
+ `unit` (string, optional) 
+ `description` (string, optional) 
+ `readOnly` (boolean, optional) 
+ `propertyUrl` (string, optional) 


## Sector (object)
Representation of a Sector

### Properties
+ `id` (string, optional) 
+ `name` (string, optional) 
+ `description` (string, optional) 
+ `type` (enum, optional) 
    + `SOLiD_R4`
    + `SOLiD_R5`
    + `SOLiD_R6`
+ `masterIp` (string, optional) 
+ `slaveIp` (string, optional) 
+ `snmp` (string, required) 
+ `state` (enum, optional) 
    + `SOLiD_R4`
    + `SOLiD_R5`
    + `SOLiD_R6`
+ `nodeUrl` (string, optional) 
+ `eventsUrl` (string, optional) 
+ `incidentsUrl` (string, optional) 


## SNMP Security User (object)
Representation of an SNMP security user 

### Properties
+ `accessType` (enum, required) 
    + `READ`
    + `READ_WRITE`
+ `username` (string, required) 
+ `security` (enum, required) 
    + `NONE`
    + `NO_PRIVACY`
    + `PRIVACY`
+ `authProtocol` (enum, required) 
    + `MD5`
    + `SHA1`
+ `privacyProtocol` (enum, required) 
    + `DES`
    + `AES`


## SNMP Trap Session (object)
Representation of an SNMP trap session

### Properties
+ `ip` (string, required) 
+ `securityUsername` (string, required) 
+ `managerName` (string, required) 
+ `security` (enum, required) 
    + `NONE`
    + `NO_PRIVACY`
    + `PRIVACY`
+ `authProtocol` (enum, required) 
    + `MD5`
    + `SHA1`
+ `privacyProtocol` (enum, required) 
    + `DES`
    + `AES`


## SNMP (object)
Representation of an SNMP

### Properties
+ `active` (boolean, optional) 
+ `securityUsers` (array[SNMP Security User], optional) 
+ `trapSessions` (array[SNMP Trap Session], optional) 
+ `mib` (string, optional) 
+ `mapper` (string, optional) 


## Setting (object)
Representation of a system Setting

### Properties
+ `outsideIp` (string, optional) 
+ `outsideSubnetMask` (string, optional) 
+ `outsideGateway` (string, optional) 
+ `insideIp` (string, optional) 
+ `insideSubnetMask` (string, optional) 
+ `http` (boolean, optional) 
+ `snapshotInterval` (number, optional) 
+ `updateRepo` (string, optional) 
+ `updateAvailable` (boolean, optional) 
+ `versionCurrent` (string, optional) 
+ `versionLatest` (string, optional) 
+ `ntpServer` (string, optional) 
+ `time` (string, optional) 
+ `projectName` (string, optional) 
+ `smtpEmail` (string, optional) 
+ `smtpUsername` (string, optional) 
+ `smtpPassword` (string, optional) 
+ `smtpAuth` (boolean, optional) 
+ `smtpTls` (boolean, optional) 
+ `smtpHost` (string, optional) 
+ `smtpPort` (number, optional) 
+ `snmp` (boolean, optional) 
